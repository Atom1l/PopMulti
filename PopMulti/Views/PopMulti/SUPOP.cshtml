@model PopMulti.Models.PopModel.PopMultiModel
@{
    Layout = "_Poplayout";
}
<link rel="stylesheet" href="/css/PopMulti.css" asp-append-version="true" />

<div class="su-bg">
    <div class="container-fluid section-popup d-flex flex-column justify-content-center align-items-center">
        <div class="uni-text su kanit-bold">SU</div> <!-- Changed KMUTT to SU -->
        <div class="score-text kanit-bold">Score :<span id="score-text" class="score-text kanit-regular"> @Model.SU.ToString()</span></div> <!-- Changed KMUTT to SU -->
        <form class="pop-form" asp-action="SUPOP" method="post"><button id="btn-pop-su" name="subtn"><img id="pop-su-multi" class="img-fluid" src="/pic/ICT1.png" alt="pop-closed" /></button></form> <!-- Changed button id to btn-pop-su -->
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script> <!--AJAX for no refreshing the page-->
<script src="/js/pop-su.js" asp-append-version="true"></script> <!-- For Popcat animation -->
<script>
    const thescorelimit = 20;

    // Setup SignalR connection
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/scoreHub") // Match the hub route in your server setup
        .build();

    // Start the connection
    connection.start()
        .then(() => console.log("Connected to SignalR"))
        .catch(err => console.error("SignalR Connection Error: ", err));

    // Listen for score updates
    connection.on("ReceiveScoreUpdate", function (university, newScore) {
        if (university === "SU") {
            document.querySelector("#score-text").textContent = newScore;
        }
    });

    // Listen for score limit reached event
    connection.on("ScoreLimitReached", function (university) {
        console.log(`${university} score limit reached! Redirecting all pages...`);
        window.location.href = '@Url.Action("PopResult", "PopMulti")'; // Redirect to PopResult page
    });

    const buttonSU = document.getElementById('btn-pop-su');

    let isGameActive = false;

    const startGame = () => {
        isGameActive = true;
        buttonSU.disabled = false;
    };

    const endGame = () => {
        isGameActive = false;
        buttonSU.disabled = true;
    };

    // Handle SU button click
    const handleScoreUpdate = (e) => {
        e.preventDefault();

        if (!isGameActive) return; // Ignore if the game is not active

        // Send a POST request to update the score for KMUTT
        fetch('@Url.Action("SUPOP", "PopMulti")', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ university: "SU", score: 1 })
        }).catch(error => console.error('Error:', error));
    };
    // Add event listeners
    if ('ontouchstart' in window) {
        buttonSU.addEventListener('touchstart', handleScoreUpdate);
    } else {
        buttonSU.addEventListener('click', handleScoreUpdate);
    }
    // Start the game automatically when the page loads
    startGame();
</script>

