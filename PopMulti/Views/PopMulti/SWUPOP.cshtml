@model PopMulti.Models.PopModel.PopMultiModel
@{
    Layout = "_Poplayout";
}
<link rel="stylesheet" href="/css/PopMulti.css" asp-append-version="true" />

<div class="container-fluid section-popup d-flex flex-column justify-content-center align-items-center">
    <div id="timer-display" class="timer-text kanit-bold text-danger">Time Left: 10s</div>
    <div class="uni-text swu kanit-bold">SWU</></div>
    <div class="score-text kanit-bold">Score :<span id="score-text" class="score-text kanit-regular"> @Model.SWU.ToString()</span></></div>
    <form asp-action="SWUPOP" method="post"><button id="btn-pop-swu" name="swubtn"><img id="pop-swu-multi" class="img-fluid" src="/pic/pop-close.png" alt="pop-closed" /></button></form>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script> <!--AJAX for no refreshing the page-->
<script src="/js/pop-swu.js" asp-append-version="true"></script> <!-- For Popcat animation -->
<!-- Script working with SignalR for real time change the score to many devices -->
<!-- With the time limit and push the button script to + the score -->
<script>
    const connection = new signalR.HubConnectionBuilder()
    .withUrl("/scoreHub") // Match the hub route in your server setup
    .build();

    // Start the connection
    connection.start()
        .then(() => console.log("Connected to SignalR"))
        .catch(err => console.error("SignalR Connection Error: ", err));

    // Listen for score updates
    connection.on("ReceiveScoreUpdate", function (newScore) {
        document.querySelector("#score-text").textContent = newScore;
    });

    const button = document.getElementById('btn-pop-swu');
    const timerDisplay = document.getElementById('timer-display');

    let timeLeft = 10; // Total game time in seconds
    let isGameActive = false;

    const startGame = () => {
        isGameActive = true;
        button.disabled = false;
        timeLeft = 10; // Reset the timer

        const gameInterval = setInterval(() => {
            timeLeft -= 1;
            timerDisplay.textContent = `Time Left: ${timeLeft}s`;

            if (timeLeft <= 0) {
                clearInterval(gameInterval);
                endGame();
            }
        }, 1000);
    };

    const endGame = () => {
        isGameActive = false;
        button.disabled = true;
        timerDisplay.textContent = 'Time is up!';

        // Redirect to another page after the game ends
        setTimeout(() => {
            window.location.href = '@Url.Action("PopResult", "PopMulti")';
        }, 2000);
    };

    // Handle button click
    button.addEventListener('click', function (e) {
        e.preventDefault();

        if (!isGameActive) return; // Ignore clicks if the game is not active

        fetch('@Url.Action("SWUPOP", "PopMulti")', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ kmuttbtn: 1 })
        }).catch(error => console.error('Error:', error));
    });

    // Start the game automatically when the page loads
    startGame();

</script>